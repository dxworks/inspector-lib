package services.vulnerability

import com.google.api.client.http.GenericUrl
import com.google.api.client.util.Key
import com.google.common.reflect.TypeToken
import dtos.VulnerabilityResponseDto
import org.dxworks.utils.java.rest.client.RestClient

class VulnerabilityService : RestClient(VULNERABILITIES_BASE_URL) {

    fun getVulnerabilities(packageUrls: List<String>): List<VulnerabilityResponseDto> {
        val vulnerabilityResponse = httpClient.post(VulnerabilitiesUrl(), VulnerabilitiesCoordinates(packageUrls))
            .parseAs(LIBRARY_VULNERABILITY_LIST_TYPE) as List<VulnerabilityResponseDto>

        val libraryVulnerabilities: MutableList<VulnerabilityResponseDto> =
            emptyList<VulnerabilityResponseDto>().toMutableList()

        vulnerabilityResponse.forEach {
            if (it.vulnerabilities.isNotEmpty()) {
                libraryVulnerabilities += it
            }
        }

        return libraryVulnerabilities
    }

    companion object {
        private const val VULNERABILITIES_BASE_URL = "https://ossindex.sonatype.org/api/v3/component-report"
        private val LIBRARY_VULNERABILITY_LIST_TYPE = object : TypeToken<List<VulnerabilityResponseDto>>() {}.type
    }

    class VulnerabilitiesUrl : GenericUrl(VULNERABILITIES_BASE_URL)

    data class VulnerabilitiesCoordinates(
        @Key
        val coordinates: List<String>
    )
}