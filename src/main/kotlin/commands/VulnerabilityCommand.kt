package commands

import dtos.Dependency
import services.vulnerability.VulnerabilityService
import services.writeDependencies
import services.writeDependenciesByProject
import java.net.URLDecoder
import java.nio.charset.StandardCharsets

class VulnerabilityCommand : InspectorLibCommand() {
    private val vulnerabilityService = VulnerabilityService()


    override fun consumeDependencies(dependencies: List<Dependency>) {
        println("Getting library vulnerabilities...")

        val purls = dependencies.mapNotNull { it.purl }

        val chunkedPurls = purls.chunked(128)

        val libraryVulnerabilities = chunkedPurls.flatMap {
            vulnerabilityService.getVulnerabilities(it)
        }

        val vulnerabilitiesByPurl =
            libraryVulnerabilities.associateBy { URLDecoder.decode(it.coordinates, StandardCharsets.UTF_8) }


        println("Vulnerabilities retrieved from OSS Index...")

        dependencies.forEach { d ->
            vulnerabilitiesByPurl[d.purl].let { vul ->
                d.data["Vulnerability Count"] = vul?.vulnerabilities.orEmpty().size.takeUnless { it == 0 }?.toString().orEmpty()
                d.data["Vulnerability Score"] =
                    vul?.vulnerabilities.orEmpty().sumBy { it.cvssScore?.toInt() ?: 0 }.takeUnless { it == 0 }?.toString().orEmpty()
                d.data["Vulnerability Score (Avg)"] =
                    vul?.vulnerabilities.orEmpty().map { it.cvssScore?.toInt() ?: 0 }.average().takeUnless { it.isNaN() }?.toString().orEmpty()
                d.data["Vulnerability Refs"] =
                    vul?.vulnerabilities.orEmpty().joinToString("\n", "\"", "\"") { it.reference.orEmpty() }
            }
        }
        println("Added vulnerabilities to dependencies!")

        writeDependencies(dependencies)
        writeDependenciesByProject(dependencies)
    }
}
