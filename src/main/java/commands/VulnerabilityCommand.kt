package commands

import dtos.Dependency
import dtos.VulnerabilityResponseDto
import services.vulnerability.VulnerabilityService
import java.net.URLDecoder
import java.nio.charset.StandardCharsets

class VulnerabilityCommand : InspectorLibCommand() {
    private val vulnerabilityService = VulnerabilityService()


    override fun consumeDependencies(dependencies: List<Dependency>) {
        println("Getting library vulnerabilities...")

        val depsByPurl = dependencies.filter { it.purl != null }.associateBy { it.purl }

        val purls = depsByPurl.values.mapNotNull { it.purl }

        val chunkedPurls = purls.chunked(128)

        var libraryVulnerabilities: List<VulnerabilityResponseDto> = emptyList()

        chunkedPurls.forEach {
            libraryVulnerabilities =
                vulnerabilityService.getVulnerabilities(it)
        }

        println("Vulnerabilities retrieved from OSS Index...")

        libraryVulnerabilities.forEach { vul ->
            depsByPurl[URLDecoder.decode(vul.coordinates, StandardCharsets.UTF_8)]?.let { d ->
                d.data["Vulnerability Count"] = vul.vulnerabilities.size.toString()
                d.data["Vulnerability Score"] =
                    vul.vulnerabilities.sumBy { it.cvssScore?.toInt() ?: 0 }.toString()
                d.data["Vulnerability Score (Avg)"] =
                    vul.vulnerabilities.map { it.cvssScore?.toInt() ?: 0 }.average().toString()
                d.data["Vulnerability Refs"] =
                    vul.vulnerabilities.joinToString("\n", "\"", "\"") { it.reference.orEmpty() }
            }
        }
        println("Added vulnerabilities to dependencies!")
    }


}