package commands;

import dtos.Dependency;
import dtos.VulnerabilityResponseDto;
import me.tongfei.progressbar.ProgressBar;
import me.tongfei.progressbar.ProgressBarBuilder;
import me.tongfei.progressbar.ProgressBarStyle;
import services.DependencyService;
import services.vulnerability.VulnerabilityService;

import java.util.*;
import java.util.stream.Collectors;

import static services.PackageUrlUtilsKt.createPackageUrl;
import static services.ResultsFileServiceKt.writeAgeInResultsFile;
import static services.ResultsFileServiceKt.writeVulnerabilitiesInResultsFile;

public class VulnerabilityCommand implements InspectorLibCommand {

    private List<String> dependencyFiles;
    private Map<String, List<Dependency>> mappedDependencies;

    @Override
    public boolean parse(String[] args) {
        if (args.length == 1)
            return false;

        String[] files = Arrays.copyOfRange(args, 1, args.length);

        dependencyFiles = Arrays.stream(files).filter(this::fileOrFolderExists).collect(Collectors.toList());

        return !dependencyFiles.isEmpty() && files.length == dependencyFiles.size();
    }

    @Override
    public void execute(String[] args) {
        DependencyService dependencyService = new DependencyService();
        List<Dependency> dependencies = dependencyService.getDependenciesFromFiles(dependencyFiles);

        mappedDependencies = dependencies.stream().collect(Collectors.groupingBy(Dependency::getProvider));

        List<String> packageUrls = new ArrayList<>();

        try (ProgressBar pb = new ProgressBarBuilder()
                .setInitialMax(dependencies.size())
                .setUnit(" Dependencies", 1)
                .setTaskName("Getting vulnerabilities...")
                .setStyle(ProgressBarStyle.ASCII)
                .setUpdateIntervalMillis(100)
                .setPrintStream(System.err)
                .build()) {
            for (Map.Entry<String, List<Dependency>> entry : mappedDependencies.entrySet()) {
                for (Dependency d : entry.getValue()) {
                    try {
                        packageUrls.add(createPackageUrl(d));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    pb.step();
                }
            }

            VulnerabilityService vulnerabilityService = new VulnerabilityService();
            List<VulnerabilityResponseDto> libraryVulnerabilities = vulnerabilityService.getVulnerabilities(packageUrls);

            writeVulnerabilitiesInResultsFile(libraryVulnerabilities);
        }

        System.out.println("Result file was created successfully!");
    }
}
